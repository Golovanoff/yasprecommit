#Использовать gitrunner
#Использовать v8unpack
#Использовать fs
#Использовать v8runner

Функция Версия() Экспорт
	Версия = "0.0.1";
	Возврат "v" + Версия;
КонецФункции

Функция ПолноеИмяФайлаБезРасширения(Файл)
	Возврат ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения);
КонецФункции

Функция ИмяФайлаБезЗапрещенныхСимволов(Знач Стр)
	
	Перем ЗапрещенныйСимвол, ЗапрещенныеСимволы;
	
	ЗапрещенныеСимволы = Новый Массив;
	ЗапрещенныеСимволы.Добавить("<");
	ЗапрещенныеСимволы.Добавить(">");
	ЗапрещенныеСимволы.Добавить("""");
	ЗапрещенныеСимволы.Добавить("|");
	ЗапрещенныеСимволы.Добавить("*");
	ЗапрещенныеСимволы.Добавить("\");
	ЗапрещенныеСимволы.Добавить("/");
	ЗапрещенныеСимволы.Добавить(":");
	ЗапрещенныеСимволы.Добавить("?");
	
	Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл
		Стр = СтрЗаменить(Стр, ЗапрещенныйСимвол, "");
	КонецЦикла;

	Возврат Стр;
КонецФункции

Функция СтрокаВМассив(Строка, Разделитель = " ")
	Возврат СтрРазделить(Строка, Разделитель);
КонецФункции

Функция ОбернутьВКавычки(Строка)
	Возврат СтрШаблон("""%1""", Строка);
КонецФункции

Функция УбратьИзКоммита(Путь, ГитРепо)
	ПараметрыКоманды = СтрокаВМассив("rm --cached");
	ПараметрыКоманды.Добавить(ОбернутьВКавычки(Путь));

	Возврат ВыводКомандыГит(ГитРепо, ПараметрыКоманды);
КонецФункции

Функция ДобавитьВКоммит(Путь, ГитРепо)
	ПараметрыКоманды = СтрокаВМассив("add --all");
	ПараметрыКоманды.Добавить(ОбернутьВКавычки(Путь));
	
	Возврат ВыводКомандыГит(ГитРепо, ПараметрыКоманды);
КонецФункции

Функция ВыводКомандыГит(ГитРепо, ПараметрыКоманды)
	ГитРепо.ВыполнитьКоманду(ПараметрыКоманды);
	Возврат ГитРепо.ПолучитьВыводКоманды();
КонецФункции

Функция ЖурналИзмененийГит(ГитРепо, Фильтр = "")
	
	Журнал = Новый Массив;

	Вывод = ВыводКомандыГит(ГитРепо, СтрокаВМассив("diff-index --name-only --ignore-submodules --cached HEAD " + Фильтр));

	Для Каждого СтрокаВывода Из СтрРазделить(Вывод, Символы.ПС) Цикл
		Если ЗначениеЗаполнено(СтрокаВывода) Тогда
			Журнал.Добавить(СокрЛП(СтрокаВывода));
		КонецЕсли;
	КонецЦикла;

	Возврат Журнал;
КонецФункции

Функция РазобратьОбычнуюФорму(ИмяФайла, ГитРепо)

	Файл = Новый Файл(ИмяФайла);

	Куда = ОбъединитьПути(Файл.Путь, "Form");
		
	Если Не Файл.Существует() Тогда // удалили ОФ, надо вычистить ее файлы
		
		ПопытатьсяУдалитьФайлы(ОбъединитьПути(Куда, "form")); // удаляем файл с данными формы
		Если Не ФС.ФайлСуществует(ОбъединитьПути(Файл.Путь, "Form.xml")) Тогда // нет УФ с тем же именем
			ПопытатьсяУдалитьФайлы(ОбъединитьПути(Куда, "Module.bsl")); // удаляем модуль формы
		КонецЕсли;

		Возврат ?(ФС.Существует(Куда), ДобавитьВКоммит(Куда, ГитРепо), Ложь);
	КонецЕсли;
	
	ФС.ОбеспечитьПустойКаталог(Куда);

	Сообщить("Разбираем ОФ " + Файл.ПолноеИмя);
	Распаковщик = Новый ЧтениеФайла8(Файл.ПолноеИмя);
	Распаковщик.ИзвлечьВсе(Куда, Истина);
	ОсвободитьОбъект(Распаковщик);
	Распаковщик = Неопределено;

	ВыполнитьСборкуМусора();
	
	Если Настройки().ПереименовыватьМодулиОФ Тогда
		Для Каждого ФайлМодуля Из НайтиФайлы(Куда, "module", Истина) Цикл
			СтароеИмяФайла = ФайлМодуля.ПолноеИмя;
			НовоеИмяФайла = ОбъединитьПути(ФайлМодуля.Путь, "Module.bsl");
			ПереместитьФайл(СтароеИмяФайла, НовоеИмяФайла);
		КонецЦикла;
	КонецЕсли;

	Возврат ДобавитьВКоммит(Куда, ГитРепо);
КонецФункции

Функция ПопытатьсяУдалитьФайлы(Путь, Маска = Неопределено)
	Попытка
		УдалитьФайлы(Путь, Маска);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ЭтоВнешняяОбработкаИлиОтчет(Файл)
	Расширение = НРег(Файл.Расширение);
	Возврат Расширение = ".epf" ИЛИ Расширение = ".erf";
КонецФункции

Функция ЭтоРасширение(Файл)
	Возврат НРег(Файл.Расширение) = ".cfe";
КонецФункции

Функция КаталогИсходниковФайла(Файл)
	Возврат ОбъединитьПути(ТекущийКаталог(), Настройки().КудаРазбирать, ПолноеИмяФайлаБезРасширения(Файл));
КонецФункции

Функция РазобратьКонфигуратором(ИмяФайла, ГитРепо, Конфигуратор)

	Файл = Новый Файл(ИмяФайла);
	
	Куда = КаталогИсходниковФайла(Файл);
	ФС.ОбеспечитьПустойКаталог(Куда);

	Если Не Файл.Существует() Тогда
		Возврат ДобавитьВКоммит(Куда, ГитРепо);
	КонецЕсли;

	Если ЭтоРасширение(Файл) Тогда
		Сообщить("Разбираем расширение " + Файл.ПолноеИмя);
		Тип = "Расширение";
	ИначеЕсли ЭтоВнешняяОбработкаИлиОтчет(Файл) Тогда
		Сообщить("Разбираем внешнюю обработку/отчет " + Файл.ПолноеИмя);
		Тип = "ВнешняяОбработка";
	Иначе
		ВызватьИсключение СтрШаблон("Не умею разбирать файлы вида %1!", ИмяФайла);
	КонецЕсли;

	Разобрать(Файл, Тип, Куда, Конфигуратор);

	Если НайтиФайлы(Куда, "*").Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон("Не удалось разобрать %1", Файл.ПолноеИмя);
	КонецЕсли;

	Если Не Настройки().КоммититьБинарникиОбработокИРасширений Тогда
		УбратьИзКоммита(Файл.ПолноеИмя, ГитРепо);
	КонецЕсли;

	Возврат ДобавитьВКоммит(Куда, ГитРепо);
КонецФункции

Функция Разобрать(Файл, Тип, Куда, Конфигуратор)

	МаксимумПопыток = Настройки().КоличествоПопыток;
	Разобрали = Ложь;
	Попыток = 0;
	Ошибки = "";

	Пока Разобрали = Ложь И Попыток < МаксимумПопыток Цикл
		Попытка
			Если Тип = "Расширение" Тогда
				ИмяРасширения = ИмяФайлаБезЗапрещенныхСимволов(Файл.ИмяБезРасширения);
				Конфигуратор.ЗагрузитьРасширениеИзФайла(Файл.ПолноеИмя, ИмяРасширения);
				Конфигуратор.ВыгрузитьРасширениеВФайлы(Куда, ИмяРасширения);
			ИначеЕсли Тип = "ВнешняяОбработка" Тогда
				Конфигуратор.ВыгрузитьВнешниеОтчетыИлиОбработкиВФайлы(Куда, Файл.ПолноеИмя);
			Иначе
				ВызватьИсключение СтрШаблон("Неизвестный тип файла для разборки: %1!", Тип);
			КонецЕсли;
			
			Разобрали = Истина;
	
		Исключение
			Попыток = Попыток + 1;
			Ошибки = СтрШаблон("%1%2%3", Ошибки, Символы.ПС, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

	Возврат Разобрали;
КонецФункции

Функция РазобратьВнешние(ГитРепо, Конфигуратор)

	Сообщить("Разборка измененных обработок/отчетов/расширений...");
	
	Фильтр = "*[Ee][PpRr][Ff] *[Cc][Ff][Ee]";
	ИзмененияКоммита = ЖурналИзмененийГит(ГитРепо, Фильтр);
	
	Для Каждого ИзмененныйФайл Из ИзмененияКоммита Цикл
		РазобратьКонфигуратором(ИзмененныйФайл, ГитРепо, Конфигуратор);
	КонецЦикла;

	Возврат 0;
КонецФункции

Функция РазобратьОбычныеФормы(ГитРепо)

	Сообщить("Разборка обычных форм...");
	
	Фильтр = "*[Ff][Oo][Rr][Mm].[Bb][Ii][Nn]";
	ИзмененияКоммита = ЖурналИзмененийГит(ГитРепо, Фильтр);
	
	Для Каждого ИзмененныйФайл Из ИзмененияКоммита Цикл
		РазобратьОбычнуюФорму(ИзмененныйФайл, ГитРепо);
	КонецЦикла;

	Возврат 0;
КонецФункции

Функция РазобратьИзмененияКоммита()

	Перем ВерсияПлатформы;

	ГитРепо = Новый ГитРепозиторий();
	ГитРепо.УстановитьРабочийКаталог(ТекущийКаталог());

	Конфигуратор = Новый УправлениеКонфигуратором;
	КаталогСборки = ПолучитьИмяВременногоФайла();

	ФС.ОбеспечитьПустойКаталог(КаталогСборки);
	Конфигуратор.КаталогСборки(КаталогСборки);

	Настройки().Свойство("ВерсияПлатформы", ВерсияПлатформы);
	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;

	РазобратьВнешние(ГитРепо, Конфигуратор);
	РазобратьОбычныеФормы(ГитРепо);

	Сообщить("Успешно завершено.");
	Возврат 0;
КонецФункции

Функция Настройки()
	Настройки = Новый Структура();

	Настройки.Вставить("ВерсияПлатформы", "8.3.10");
	Настройки.Вставить("КудаРазбирать", "src");
	Настройки.Вставить("РазбиратьОФ", Истина);
	Настройки.Вставить("ПереименовыватьМодулиОФ", Истина);
	Настройки.Вставить("КоммититьБинарникиОбработокИРасширений", Истина);
	Настройки.Вставить("КоличествоПопыток", 5);

	Возврат Настройки;
КонецФункции

РазобратьИзмененияКоммита();
