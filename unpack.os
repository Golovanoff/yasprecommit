#Использовать gitrunner
#Использовать v8unpack
#Использовать fs
#Использовать v8runner

Функция Версия() Экспорт
	
	Перем Версия;

	Версия = "0.0.4";
	Возврат "v" + Версия;
КонецФункции

Функция ПолноеИмяФайлаБезРасширения(Знач Файл)
	Возврат ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения);
КонецФункции

Функция ИмяФайлаБезЗапрещенныхСимволов(Знач Стр)
	
	Перем ЗапрещенныйСимвол, ЗапрещенныеСимволы;
	
	ЗапрещенныеСимволы = Новый Массив;
	ЗапрещенныеСимволы.Добавить("<");
	ЗапрещенныеСимволы.Добавить(">");
	ЗапрещенныеСимволы.Добавить("""");
	ЗапрещенныеСимволы.Добавить("|");
	ЗапрещенныеСимволы.Добавить("*");
	ЗапрещенныеСимволы.Добавить("\");
	ЗапрещенныеСимволы.Добавить("/");
	ЗапрещенныеСимволы.Добавить(":");
	ЗапрещенныеСимволы.Добавить("?");
	
	Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл
		Стр = СтрЗаменить(Стр, ЗапрещенныйСимвол, "");
	КонецЦикла;

	Возврат Стр;
КонецФункции

Функция СтрокаВМассив(Знач Строка, Знач Разделитель = " ")
	Возврат СтрРазделить(Строка, Разделитель);
КонецФункции

Функция ОбернутьВКавычки(Знач Строка)
	Возврат СтрШаблон("""%1""", Строка);
КонецФункции

Функция УбратьИзКоммита(Знач Путь, Знач ГитРепо)
	
	Перем ПараметрыКоманды;

	ПараметрыКоманды = СтрокаВМассив("rm --cached");
	ПараметрыКоманды.Добавить(ОбернутьВКавычки(Путь));

	Возврат ВыводКомандыГит(ГитРепо, ПараметрыКоманды);
КонецФункции

Функция ДобавитьВКоммит(Знач Путь, Знач ГитРепо)
	
	Перем ПараметрыКоманды;

	ПараметрыКоманды = СтрокаВМассив("add --all");
	ПараметрыКоманды.Добавить(ОбернутьВКавычки(Путь));
	
	Возврат ВыводКомандыГит(ГитРепо, ПараметрыКоманды);
КонецФункции

Функция ВыводКомандыГит(Знач ГитРепо, Знач ПараметрыКоманды)
	ГитРепо.ВыполнитьКоманду(ПараметрыКоманды);
	Возврат ГитРепо.ПолучитьВыводКоманды();
КонецФункции

Функция ЖурналИзмененийГит(Знач ГитРепо, Знач Фильтр = "")
	
	Перем Журнал, Вывод, СтрокаВывода;

	Журнал = Новый Массив;

	Вывод = ВыводКомандыГит(ГитРепо, СтрокаВМассив("diff-index --name-only --ignore-submodules --cached HEAD " + Фильтр));

	Для Каждого СтрокаВывода Из СтрРазделить(Вывод, Символы.ПС) Цикл
		Если ЗначениеЗаполнено(СтрокаВывода) Тогда
			Журнал.Добавить(СокрЛП(СтрокаВывода));
		КонецЕсли;
	КонецЦикла;

	Возврат Журнал;
КонецФункции

Функция РазобратьОбычнуюФорму(Знач ИмяФайла, Знач ГитРепо)

	Перем Файл, Куда, Распаковщик, СтароеИмяФайла, НовоеИмяФайла;

	Файл = Новый Файл(ИмяФайла);

	Куда = ОбъединитьПути(Файл.Путь, "Form");
		
	Если Не Файл.Существует() Тогда // удалили ОФ, надо вычистить ее файлы
		
		ПопытатьсяУдалитьФайлы(ОбъединитьПути(Куда, "form")); // удаляем файл с данными формы
		Если Не ФС.ФайлСуществует(ОбъединитьПути(Файл.Путь, "Form.xml")) Тогда // нет УФ с тем же именем
			ПопытатьсяУдалитьФайлы(ОбъединитьПути(Куда, "Module.bsl")); // удаляем модуль формы
		КонецЕсли;

		Возврат ?(ФС.Существует(Куда), ДобавитьВКоммит(Куда, ГитРепо), Ложь);
	КонецЕсли;
	
	ФС.ОбеспечитьПустойКаталог(Куда);

	Сообщить("Разбираем ОФ " + Файл.ПолноеИмя);
	Распаковщик = Новый ЧтениеФайла8(Файл.ПолноеИмя);
	Распаковщик.ИзвлечьВсе(Куда, Истина);
	ОсвободитьОбъект(Распаковщик);
	Распаковщик = Неопределено;

	ВыполнитьСборкуМусора();
	
	Если Настройки().ПереименовыватьМодулиОФ Тогда
		Для Каждого ФайлМодуля Из НайтиФайлы(Куда, "module", Истина) Цикл
			СтароеИмяФайла = ФайлМодуля.ПолноеИмя;
			НовоеИмяФайла = ОбъединитьПути(ФайлМодуля.Путь, "Module.bsl");
			ПереместитьФайл(СтароеИмяФайла, НовоеИмяФайла);
		КонецЦикла;
	КонецЕсли;

	Возврат ДобавитьВКоммит(Куда, ГитРепо);
КонецФункции

Функция ПопытатьсяУдалитьФайлы(Знач Путь, Знач Маска = Неопределено)
	Попытка
		УдалитьФайлы(Путь, Маска);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ЭтоВнешняяОбработкаИлиОтчет(Знач Файл)
	
	Перем Расширение;

	Расширение = НРег(Файл.Расширение);
	Возврат Расширение = ".epf" ИЛИ Расширение = ".erf";
КонецФункции

Функция ЭтоРасширение(Знач Файл)
	Возврат НРег(Файл.Расширение) = ".cfe";
КонецФункции

Функция КаталогИсходниковФайла(Знач Файл)
	Возврат ОбъединитьПути(ТекущийКаталог(), Настройки().КудаРазбирать, ПолноеИмяФайлаБезРасширения(Файл));
КонецФункции

Функция РазобратьКонфигуратором(Знач ИмяФайла, Знач ГитРепо, Знач Конфигуратор)

	Перем Файл, Куда, Тип;

	Файл = Новый Файл(ИмяФайла);
	
	Куда = КаталогИсходниковФайла(Файл);
	ФС.ОбеспечитьПустойКаталог(Куда);

	Если Не Файл.Существует() Тогда
		Возврат ДобавитьВКоммит(Куда, ГитРепо);
	КонецЕсли;

	Если ЭтоРасширение(Файл) Тогда
		Сообщить("Разбираем расширение " + Файл.ПолноеИмя);
		Тип = "Расширение";
	ИначеЕсли ЭтоВнешняяОбработкаИлиОтчет(Файл) Тогда
		Сообщить("Разбираем внешнюю обработку/отчет " + Файл.ПолноеИмя);
		Тип = "ВнешняяОбработка";
	Иначе
		ВызватьИсключение СтрШаблон("Не умею разбирать файлы вида %1!", ИмяФайла);
	КонецЕсли;

	Разобрать(Файл, Тип, Куда, Конфигуратор);

	Если НайтиФайлы(Куда, "*").Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон("Не удалось разобрать %1", Файл.ПолноеИмя);
	КонецЕсли;

	Если Не Настройки().КоммититьБинарникиОбработокИРасширений Тогда
		УбратьИзКоммита(Файл.ПолноеИмя, ГитРепо);
	КонецЕсли;

	Возврат ДобавитьВКоммит(Куда, ГитРепо);
КонецФункции

Функция Разобрать(Знач Файл, Знач Тип, Знач Куда, Знач Конфигуратор)

	Перем МаксимумПопыток, Разобрали, Попыток, ИмяРасширения;

	МаксимумПопыток = Настройки().КоличествоПопыток;
	Разобрали = Ложь;
	Попыток = 0;

	Пока Разобрали = Ложь И Попыток < МаксимумПопыток Цикл
		Попытка
			Если Тип = "Расширение" Тогда
				ИмяРасширения = ИмяФайлаБезЗапрещенныхСимволов(Файл.ИмяБезРасширения);
				Конфигуратор.ЗагрузитьРасширениеИзФайла(Файл.ПолноеИмя, ИмяРасширения);
				Конфигуратор.ВыгрузитьРасширениеВФайлы(Куда, ИмяРасширения);
			ИначеЕсли Тип = "ВнешняяОбработка" Тогда
				Конфигуратор.ВыгрузитьВнешниеОтчетыИлиОбработкиВФайлы(Куда, Файл.ПолноеИмя);
			Иначе
				ВызватьИсключение СтрШаблон("Неизвестный тип файла для разборки: %1!", Тип);
			КонецЕсли;
			
			Разобрали = Истина;
	
		Исключение
			Попыток = Попыток + 1;
			Сообщить(СтрШаблон("Попытка %1: %2", Попыток, ОписаниеОшибки()));
		КонецПопытки;
	КонецЦикла;

	Возврат Разобрали;
КонецФункции

Функция РазобратьВнешние(Знач ГитРепо, Знач Конфигуратор)

	Перем Фильтр, ИзмененияКоммита, ИзмененныйФайл;

	Сообщить("Разборка измененных обработок/отчетов/расширений...");
	
	Фильтр = "*[Ee][PpRr][Ff] *[Cc][Ff][Ee]";
	ИзмененияКоммита = ЖурналИзмененийГит(ГитРепо, Фильтр);
	
	Для Каждого ИзмененныйФайл Из ИзмененияКоммита Цикл
		РазобратьКонфигуратором(ИзмененныйФайл, ГитРепо, Конфигуратор);
	КонецЦикла;

	Возврат 0;
КонецФункции

Функция РазобратьОбычныеФормы(Знач ГитРепо)

	Перем Фильтр, ИзмененияКоммита, ИзмененныйФайл;

	Сообщить("Разборка обычных форм...");
	
	Фильтр = "*[Ff][Oo][Rr][Mm].[Bb][Ii][Nn]";
	ИзмененияКоммита = ЖурналИзмененийГит(ГитРепо, Фильтр);
	
	Для Каждого ИзмененныйФайл Из ИзмененияКоммита Цикл
		РазобратьОбычнуюФорму(ИзмененныйФайл, ГитРепо);
	КонецЦикла;

	Возврат 0;
КонецФункции

Функция РазобратьИзмененияКоммита()

	Перем ГитРепо, Конфигуратор;

	ГитРепо = Новый ГитРепозиторий();
	ГитРепо.УстановитьРабочийКаталог(ТекущийКаталог());

	Конфигуратор = КонфигураторБазы();

	РазобратьВнешние(ГитРепо, Конфигуратор);
	РазобратьОбычныеФормы(ГитРепо);

	Сообщить("Успешно завершено.");
	Возврат 0;
КонецФункции

Функция КонфигураторБазы()

	Перем Конфигуратор, КаталогСборки, ВерсияПлатформы, СтрокаСоединения, Пользователь, Пароль;

	Конфигуратор = Новый УправлениеКонфигуратором();

	КаталогСборки = ПолучитьИмяВременногоФайла();

	ФС.ОбеспечитьПустойКаталог(КаталогСборки);
	Конфигуратор.КаталогСборки(КаталогСборки);

	Настройки().Свойство("ВерсияПлатформы", ВерсияПлатформы);
	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;

	Настройки().Свойство("СтрокаСоединения", СтрокаСоединения);
	Настройки().Свойство("Пользователь", Пользователь);
	Настройки().Свойство("Пароль", Пароль);

	Если ЗначениеЗаполнено(СтрокаСоединения) Тогда
		Если ЭтоСтрокаСоединенияСФайловойБазой(СтрокаСоединения) Тогда
			Конфигуратор.УстановитьКонтекст("/F""" + КаталогФайловойБазы(СтрокаСоединения) + """", Пользователь, Пароль);
		ИначеЕсли ЭтоСтрокаСоединенияССервернойБазой(СтрокаСоединения) Тогда
			Конфигуратор.УстановитьКонтекст("/IBConnectionString " + СтрокаСоединения, Пользователь, Пароль);
		Иначе
			ВызватьИсключение "Не смог определить тип строки соединения с базой!";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Конфигуратор;
КонецФункции

Функция КаталогФайловойБазы(Знач СтрокаСоединения) Экспорт
	
	Перем НачалоСтрокиСоединения, ДлинаНачала;

	СтрокаСоединения = СокрЛП(СтрокаСоединения);
	НачалоСтрокиСоединения = НачалоСтрокиСоединенияСФайловойБазой();
	ДлинаНачала = СтрДлина(НачалоСтрокиСоединения);

	// убираем из строки вида File="С:\Путь\к\базе"; начало, обрамляющие кавычки и конечную ;
	Возврат Сред(СтрокаСоединения, ДлинаНачала + 2, СтрДлина(СтрокаСоединения) - ДлинаНачала - 3);
КонецФункции

Функция ЭтоСтрокаСоединенияСФайловойБазой(Знач СтрокаСоединения) Экспорт
	Возврат ЭтоСтрокаСоединения(СтрокаСоединения, НачалоСтрокиСоединенияСФайловойБазой());
КонецФункции

Функция ЭтоСтрокаСоединенияССервернойБазой(Знач СтрокаСоединения) Экспорт
	Возврат ЭтоСтрокаСоединения(СтрокаСоединения, НачалоСтрокиСоединенияССервернойБазой());
КонецФункции

Функция ЭтоСтрокаСоединения(Знач СтрокаСоединения, Знач НачалоСтроки) Экспорт
	
	Перем ДлинаНачала;

	ДлинаНачала = СтрДлина(НачалоСтроки);
	Возврат Нрег(Лев(СтрокаСоединения, ДлинаНачала)) = НРег(НачалоСтроки);
КонецФункции

Функция НачалоСтрокиСоединенияСФайловойБазой()
	Возврат "File=";
КонецФункции

Функция НачалоСтрокиСоединенияССервернойБазой()
	Возврат "Srvr=";
КонецФункции

Функция Настройки()
	
	Перем Настройки;

	Настройки = Новый Структура();

	Настройки.Вставить("ВерсияПлатформы", "8.3.10");
	Настройки.Вставить("КудаРазбирать", "src");
	Настройки.Вставить("РазбиратьОФ", Истина);
	Настройки.Вставить("ПереименовыватьМодулиОФ", Истина);
	Настройки.Вставить("КоммититьБинарникиОбработокИРасширений", Истина);
	Настройки.Вставить("КоличествоПопыток", 5);
	// строка соединения базы, в которой необходимо производить разбор.
	// копируем и вставляем прямо из стартера 1с, только кавычки надо задвоить.
	// если не указана - разбор производится во временной файловой базе
	Настройки.Вставить("СтрокаСоединения", ""); 
	// пользователь и пароль базы для разбора.
	// если в базе включена доменная авторизация - оставляем пустыми
	Настройки.Вставить("Пользователь", "");
	Настройки.Вставить("Пароль", "");

	Возврат Настройки;
КонецФункции

РазобратьИзмененияКоммита();
